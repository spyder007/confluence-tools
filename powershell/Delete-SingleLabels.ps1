<#
    .SYNOPSIS
        Delete labels from page where only one label exists in the space
    .DESCRIPTION
        Using the output of Get-ConfluenceLabelStats.ps1, remove labels from pages when there is only a single instance of that label in a defined space.

    .PARAMETER Space
        The Space Key of the Space you wish to search
    
    .PARAMETER InputFile
        A CSV file generated by Get-ConfluenceLabelStats.ps1

    .PARAMETER BaseUrl
        The base URL of the confluence site you are using.  You may set an environment variable (CONFLUENCE_BASE_URL) instead of supplying this value.

    .PARAMETER User
        The User of the confluence site you are using.  You may set an environment variable (CONFLUENCE_API_USER) instead of supplying this value.

    .PARAMETER ApiToken
        The API Token for the User of the confluence site you are using.  You may set an environment variable (CONFLUENCE_API_TOKEN) instead of supplying this value.

    .EXAMPLE
        Delete-SingleLabels.ps1 PSIT c:\path\to\statoutput.csv -BaseUrl https://accruent.atlassian.net/ -User user@accruent.com -ApiToken MyApiToken

    .NOTES
        In order to use this, you must have an API token for your Atlassian account.  Instructions for configuring an API token can be found at https://confluence.atlassian.com/cloud/api-tokens-938839638.html

        Adding the following environment variables shortens the commands considerably
            - CONFLUENCE_BASE_URL - https://accruent.atlassian.net/
            - CONFLUENCE_API_USER - user@accruent.com
            - CONFLUENCE_API_TOKEN - MyApiToken
#>

param(
    [Parameter(Position=1, Mandatory)]
    [System.String] $Space,

    [Parameter(Position=2, Mandatory)]
    [System.String] $InputFile,

    [System.String] $BaseUrl,
    [System.String] $User, 
    [System.String] $ApiToken
)

if ([System.String]::IsNullOrWhiteSpace($User)) {
    $User = $ENV:CONFLUENCE_API_USER    
}

if ([System.String]::IsNullOrWhiteSpace($ApiToken)) {
    $ApiToken = $ENV:CONFLUENCE_API_TOKEN;
}

if ([System.String]::IsNullOrWhiteSpace($BaseUrl)) {
    $BaseUrl = $ENV:CONFLUENCE_BASE_URL;
}

if ([System.String]::IsNullOrWhiteSpace($User) -or [System.String]::IsNullOrWhiteSpace($ApiToken)) {
    Write-Error "User and Api Token is required.  Either supply them via the -User and -ApiToken parameters or set environment variables named CONFLUENCE_API_USER and CONFLUENCE_API_TOKEN.";
}

$pair = "$($User):$($ApiToken)"

$encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))

$basicAuthValue = "Basic $encodedCreds"

$Headers = @{
    Authorization = $basicAuthValue
}

if ((Test-Path $InputFile) -eq $false) {
    Write-Error "Could not find $InputFile"
    return -1;
}

$csv = Import-Csv $InputFile

$csv | Where-Object { $_.LabelCount -eq 1 } | ForEach-Object { 

    $label = $_.Label
    $result = Invoke-RestMethod -Method GET -Uri "$($BaseUrl)wiki/rest/api/content/search?cql=space%3D$($Space)%20and%20type%3Dpage%20and%20label%3D'$($label)'&expand=metadata.labels" -Headers $Headers

    foreach ($item in $result.results) {
        Write-Host "Removing $($label) from $($item.title)"
        #Invoke-RestMethod -Method DELETE -Uri "$($BaseUrl)wiki/rest/api/content/$($item.id)/label/$($label)" -Headers $Headers | Out-Null
    }    
}






